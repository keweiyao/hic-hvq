#!/usr/bin/env python3
import numpy as np
import h5py, sys, os, subprocess
from ast import literal_eval as eva
import fortranformat as ff
import event

# save a copy of quarks and hadrons @ freezeout
def save_to_dataset(group, pname):
	line = ff.FortranRecordReader('i10,2x,i10,19(2x,d12.6)')
	#n, id, px, py, pz, p0, M, x, y, z, t, T,
	# vx, vy, vz, ipx, ipy, ipz, ip0, weight, _
	for level, fnamefmt in zip(['quark', 'hadron'],
		['{}-quark-frzout.dat', '{}-meson-frzout.dat']):
		pid = []
		p = []
		w = []
		with open(fnamefmt.format(pname)) as f:
			for i, l in enumerate(f):
				if i>3:
					ds = line.read(l)
					pid.append(ds[1])
					p.append(ds[2:6])
					w.append(ds[19])
		group.create_dataset(level+'/pid', data=np.array(pid), dtype=np.int)
		group.create_dataset(level+'/p', data=np.array(p), dtype=np.float)
		group.create_dataset(level+'/w', data=np.array(w), dtype=np.float)

def main():
	# parse config file
	with open(sys.argv[1], 'r') as f:
		config = dict( (i.strip() for i in l.split('=', maxsplit=1)) \
				for l in f if l[0] != '#')
	ievent = int(sys.argv[2])
	#echo config:
	print('##################################')
	for key, val in config.items():
		print('{} = {}'.format(key, val))
	print('##################################')

	pkgname = os.environ['pkgname'] # package name/path
	p_types = ['c', 'b'] # study charm and bottom quarks / hadrons
	with h5py.File('./initial.hdf', 'r') as icfile:
		prefix = "event_{}".format(ievent)
		print("Hard event: ",prefix)
		TAB = icfile[prefix+'/Ncoll_density'].value.T	# TAB profile
		dx = icfile[prefix].attrs['dxy'] # TAB grid size
		b = icfile[prefix].attrs['b']   # impact parameter of this event
	# physics!
	mu = float(config.get('mu')) # no default, have to be sure what I am doing
	A = float(config.get('A')) # no default, have to be sure what I am doing
	B = float(config.get('B')) # no default, have to be sure what I am doing
	afix = float(config.get('afix')) # if -1, running coupling, else this is the value of fix alpha_s

	# initilization fonfigureation
	init_config =  { 'type': 'Pythia+Trento', 'PythiaInput': "PythiaInput.dat",
			 'TAB': TAB, 'dxy': dx, 'b': b}

	e1 = event.event(preeq={'type':'dynamic', 'hydrofile': "./FreeStream.h5"},
			medium={'type':'dynamic', 'hydrofile': "./JetData.h5"},
			LIDO={'mu': mu, 'afix': afix, 'A': A, 'B': B},  Tc=0.154)
	e1.initialize_HQ(init_config )

	# preeq stage
	p,x = e1.HQ_hist()
	print("Initial mean-pT:", ((p.T[1]**2+p.T[2]**2)**0.5).mean())
	while e1.perform_fs_step():
		print("t = {:1.3f} [fm/c]".format(e1.sys_time()) )
	# hydro stage
	while e1.perform_hydro_step():
		print("t = {:1.3f} [fm/c]".format(e1.sys_time()) )
	p,x = e1.HQ_hist()
	print("final mean-pT:", ((p.T[1]**2+p.T[2]**2)**0.5).mean())

	# hadronization
	prefix = "./{}/share/hvq-hadronization/".format(pkgname)
	for pid in p_types:
		# write oscar format
		e1.output_oscar(4 if pid == 'c' else 5, "./{}-quark-frzout.dat".format(pid))
		# hadronization
		os.environ["ftn20"] = "./{}-meson-frzout.dat".format(pid)
		os.environ["ftn30"] = prefix+"parameters_{}_hd.dat".format(pid)
		os.environ["ftn40"] = prefix+"recomb_{}_tot.dat".format(pid)
		os.environ["ftn50"] = prefix+"recomb_{}_BR1.dat".format(pid)
		subprocess.run("hvq-hadronization",
					stdin=open("./{}-quark-frzout.dat".format(pid)))

	# save back to hdf5 file
	with h5py.File('HeavyAtFrzout.hdf5', 'w') as fh5:
		group = fh5.create_group("event")
		for pid in p_types:
			subgroup = group.create_group(pid)
			save_to_dataset(subgroup, pid)

if __name__ == "__main__":
	main()
