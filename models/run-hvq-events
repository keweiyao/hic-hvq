#!/usr/bin/env python3

import numpy as np
import h5py
import subprocess
import sys
import os
import event
from ast import literal_eval as eva
import fortranformat as ff

def main():
    # parse config file
    if len(sys.argv) >= 3:
        hydrofilename = sys.argv[1]
        icfile = h5py.File(sys.argv[2], 'r')
        if len(sys.argv) >= 4:
            with open(sys.argv[3], 'r') as f:
                config = dict( (i.strip() for i in l.split('=', maxsplit=1)) \
                               for l in f if l[0] != '#')
            if len(sys.argv) == 5:
                run_id = int(sys.argv[4])
            else:
                run_id = 0
        else:
            config = {}    
    else:
        raise ValueError("Usage: (1)hydro, (2)ic, (3)[config], (4)[id]")

    #echo config:
    for key, val in config.items():
        print('{} = {}'.format(key, val))

    pkgname = os.environ['pkgname']
    dynamic_config = {  'type'      : 'dynamic', 
                        'hydrofile' : hydrofilename    }

    if config.get('hvq-mode', 'LBT'):
        hvq_config = {  'physics'   : 'LBT',
                        '2->2'    : eva(config.get('c22', 'True')),
                        '2->3'    : eva(config.get('c23', 'False')),
                        '3->2'    : eva(config.get('c32', 'False')),
                        'Nf'    : 3,
                        'mass'    : float(config.get('mass', 1.3)),
                        'Kfactor' : float(config.get('K', 1.0)),
                        'lambda_rescale' : float(config.get('Lambda', 1.0)) }  
    else:
        hvq_config = {  'physics'   : 'LGV',
                         'dt_lrf'   : float(config.get('dt-lrf', 0.1)),
                         'elastic'  : eva(config.get('elastic-lgv', True)),
                         'Einstein' : eva(config.get('ER', True)),
                         'Nf'       : 3,
                         'mass'     : float(config.get('mass', 1.3)) } 

    TAB = icfile['TAB_0'].value.T
    dx = icfile['event_0'].attrs['dx']
    init_config =  { 'type'  : 'A+B',
                     'sample power'  : 1.,
                     'pTmin'         : 0.1,
                     'pTmax'         : 70.,
                     'ymin'          : float(config.get('ymin', -1.)),
                     'ymax'          : float(config.get('ymax', 1.)),
                     'TAB'           : TAB,
                     'dxy'           : dx   }
    total_TAB = np.sum(TAB)*dx*dx
    NQ = int(config.get('N-hvq', 50000))

    with open("event_weight.txt", "a") as wf:
        wf.write("{} {}\n".format(total_TAB, NQ))
    
    e1 = event.event(   medium_flags=dynamic_config , 
                        physics_flags=hvq_config,
                        Tc=float(config.get('Tc', 0.154)),
                        table_folder="{}/share/hvq/tables/".format(pkgname),
                        refresh_table=eva(config.get('new-table', 'False'))
					)

    e1.initialize_HQ(   NQ=NQ,
                        init_flags=init_config   )

    # Run Model
    for i in range(500):
        print ("t = %1.2f [fm/c]"%e1.sys_time())
        status = e1.perform_hydro_step()
        if not status:
            break
    e1.output_oscar('./hvq-final-{}.dat'.format(run_id))

    
    # hadronization
    os.environ["ftn20"] = "./h-meson-final-{}.dat".format(run_id)
    os.environ["ftn30"] = "./{}/share/hvq-hadronization/parameters_hd.dat".format(pkgname)
    os.environ["ftn40"] = "./{}/share/hvq-hadronization/recomb_c_tot.dat".format(pkgname)
    os.environ["ftn50"] = "./{}/share/hvq-hadronization/recomb_c_BR1.dat".format(pkgname)
    subprocess.run("hvq-hadronization", stdin=open('./hvq-final-{}.dat'.format(run_id)))

    # save everything back in hdf5 format for God's sake ...
    # reading back fortran format in python is too slow ...
    line = ff.FortranRecordReader('i10,2x,i10,17(2x,d12.6)')
    fh5 = h5py.File('HeavyFlavorResult.hdf5', 'a')
    #n, id, px, py, pz, p0, M, x, y, z, t, T, vx, vy, vz, ipx, ipy, ipz, weight
    pv = []
    pT0 = []
    with open('./hvq-final-{}.dat'.format(run_id)) as f:
        for i, l in enumerate(f):
            if i>3:
                ds = line.read(l)
                pv.append(ds[2:6])
                pT0.append(np.sqrt(ds[16]**2+ds[15]**2))
    fh5.create_dataset(name='quark-pv-{}'.format(run_id), data=np.array(pv))
    fh5.create_dataset(name='quark-pT0-{}'.format(run_id), data=np.array(pT0))

    pv = []
    pT0 = []
    with open('./h-meson-final-{}.dat'.format(run_id)) as f:
        for i, l in enumerate(f):
            if i>3:
                ds = line.read(l)
                pv.append(ds[2:6])
                pT0.append(np.sqrt(ds[16]**2+ds[15]**2))
    fh5.create_dataset(name='meson-pv-{}'.format(run_id), data=np.array(pv))
    fh5.create_dataset(name='meson-pT0-{}'.format(run_id), data=np.array(pT0))
if __name__ == "__main__":
    main()



