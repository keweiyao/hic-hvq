#!/usr/bin/env python3

import numpy as np
import h5py
import subprocess
import sys
import os
import event
from ast import literal_eval as eva
import fortranformat as ff

def main():
	for s in sys.argv:
		print(s)
	# parse config file
	if len(sys.argv) >= 3:
		hydrofilename = sys.argv[1]
		icfile = h5py.File(sys.argv[2], 'r')
		if len(sys.argv) >= 4:
			with open(sys.argv[3], 'r') as f:
				config = dict( (i.strip() for i in l.split('=', maxsplit=1)) \
							   for l in f if l[0] != '#')
			if len(sys.argv) == 5:
				run_id = int(sys.argv[4])
			else:
				run_id = 0
		else:
			config = {}	
	else:
		raise ValueError("Usage: (1)hydro, (2)ic, (3)[config], (4)[id]")

	#echo config:
	for key, val in config.items():
		print('{} = {}'.format(key, val))

	pkgname = os.environ['pkgname']
	dynamic_config = {  'type'	  : 'dynamic', 
						'hydrofile' : hydrofilename	}


	if config.get('hvq-mode', 'LBT') == 'LBT':
		trans_options = {'name' : 'LBT', 
					   '2->2' : eva(config.get('c22', 'True')),
					   '2->3' : eva(config.get('c23', 'False')),
					   '3->2' : eva(config.get('c32', 'False')),
					   'lambda_rescale' : float(config.get('Lambda', 1.0))
					   }
	else:
		trans_options = {'name'		: 'LGV',
						 'dt_lrf'   : float(config.get('dt-lrf', 0.1)),
						 'elastic'  : eva(config.get('elastic-lgv', 'True')),
						 'Einstein' : eva(config.get('ER', 'True'))
					   } 

	phy_config = {  'transport' : trans_options,
					'Nf'	  : 3,
					'Tc'	  : float(config.get('Tc', 0.154)),
					'mD' 	  : {'mD-model' : int(config.get('mD-model', 0)),
								 'mTc'  : float(config.get('mD-Tc', 0.5)),
								 'slope': float(config.get('mD-slope', 1.0)),
								 'curv' : float(config.get('mD-curv', 0.0))
									},
					'mass'	: float(config.get('mass', 1.3)),
					'Kfactor' : float(config.get('K', 1.0)),
				 }  
  

	TAB = icfile['TAB_0'].value.T
	dx = icfile['event_0'].attrs['dx']
	b = icfile['event_0'].attrs['b']
	init_config =  { 'type'  : 'A+B',
					 'pTmin'		: 0.1,
					 'pTmax'		: 100.,
					 'ymin'		 	: float(config.get('ymin', -3.)),
					 'ymax'		 	: float(config.get('ymax', 3.)),
					 'TAB'			: TAB,
					 'dxy'		   	: dx,
					 'b'			: b}

	NQ = int(config.get('N-hvq', 50000))
	
	e1 = event.event(   medium_flags=dynamic_config , 
						physics_flags=phy_config,
						table_folder="./tables/",
						refresh_table=False
					)

	e1.initialize_HQ(   NQ=NQ,
						init_flags=init_config   )

	# Run Model
	for i in range(500):
		print ("t = %1.2f [fm/c]"%e1.sys_time())
		status = e1.perform_hydro_step()
		if not status:
			break
	e1.output_oscar('./hvq-final-{}.dat'.format(run_id))

	
	# hadronization
	os.environ["ftn20"] = "./h-meson-final-{}.dat".format(run_id)
	os.environ["ftn30"] = "./{}/share/hvq-hadronization/parameters_hd.dat".format(pkgname)
	os.environ["ftn40"] = "./{}/share/hvq-hadronization/recomb_c_tot.dat".format(pkgname)
	os.environ["ftn50"] = "./{}/share/hvq-hadronization/recomb_c_BR1.dat".format(pkgname)
	subprocess.run("hvq-hadronization", stdin=open('./hvq-final-{}.dat'.format(run_id)))

	# save everything back in hdf5 format for God's sake ...
	# reading back fortran format in python is too slow ...
	line = ff.FortranRecordReader('i10,2x,i10,19(2x,d12.6)')
	fh5 = h5py.File('HeavyFlavorResult.hdf5', 'a')
	#n, id, px, py, pz, p0, M, x, y, z, t, T, vx, vy, vz, ipx, ipy, ipz, weight
	pid = []
	p = []
	p0 = []
	s1s2 = []
	with open('./hvq-final-{}.dat'.format(run_id)) as f:
		for i, l in enumerate(f):
			if i>3:
				ds = line.read(l)
				pid.append(ds[1])
				p.append(ds[2:6])
				p0.append(ds[15:19])
				s1s2.append(ds[19:21])
	fh5.create_dataset(name='quark-pid-{}'.format(run_id), data=np.array(pid))
	fh5.create_dataset(name='quark-p-{}'.format(run_id), data=np.array(p))
	fh5.create_dataset(name='quark-p0-{}'.format(run_id), data=np.array(p0))
	fh5.create_dataset(name='quark-s1-s2-{}'.format(run_id), data=np.array(s1s2))
	
	pid = []
	p = []
	p0 = []
	s1s2 = []
	with open('./h-meson-final-{}.dat'.format(run_id)) as f:
		for i, l in enumerate(f):
			if i>3:
				ds = line.read(l)
				pid.append(ds[1])
				p.append(ds[2:6])
				p0.append(ds[15:19])
				s1s2.append(ds[19:21])
	fh5.create_dataset(name='meson-pid-{}'.format(run_id), data=np.array(pid))
	fh5.create_dataset(name='meson-p-{}'.format(run_id), data=np.array(p))
	fh5.create_dataset(name='meson-p0-{}'.format(run_id), data=np.array(p0))
	fh5.create_dataset(name='meson-s1-s2-{}'.format(run_id), data=np.array(s1s2))
	fh5.close()

if __name__ == "__main__":
	main()



